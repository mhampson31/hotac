# Generated by Django 3.0.6 on 2020-05-20 01:05

from django.db import migrations, models
import django.db.models.deletion
import django.db.models.expressions
import mptt.fields


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='Dial',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=40)),
            ],
        ),
        migrations.CreateModel(
            name='Ship',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=40)),
                ('slug', models.SlugField(max_length=20, null=True)),
                ('start_xp', models.PositiveSmallIntegerField(default=0)),
                ('playable', models.BooleanField(default=True)),
                ('faction', models.CharField(choices=[('RA', 'Rebel Alliance'), ('GE', 'Galactic Empire'), ('SV', 'Scum and Villainy'), ('RS', 'Resistance'), ('FO', 'First Order'), ('GR', 'Republic'), ('SE', 'Seperatist')], default='RA', max_length=2)),
                ('dial', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='xwtools.Dial')),
            ],
        ),
        migrations.CreateModel(
            name='Upgrade',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=30)),
                ('type', models.CharField(choices=[('AST', 'Astromech'), ('CNN', 'Cannon'), ('CNF', 'Configuration'), ('CRW', 'Crew'), ('DVC', 'Device'), ('FRC', 'Force Power'), ('GNR', 'Gunner'), ('ILC', 'Illicit'), ('MSL', 'Missile'), ('MOD', 'Modification'), ('SNS', 'Sensor'), ('TAC', 'Tactical Relay'), ('TLN', 'Talent'), ('TCH', 'Tech'), ('TTL', 'Title'), ('TRP', 'Torpedo'), ('TRT', 'Turret'), ('SHP', 'Ship'), ('PLT', 'Pilot'), ('THR', 'Initiative'), ('FCH', 'Force Charge'), ('CHR', 'Charge'), ('WLD', 'Wildcard')], max_length=3)),
                ('type2', models.CharField(blank=True, choices=[('AST', 'Astromech'), ('CNN', 'Cannon'), ('CNF', 'Configuration'), ('CRW', 'Crew'), ('DVC', 'Device'), ('FRC', 'Force Power'), ('GNR', 'Gunner'), ('ILC', 'Illicit'), ('MSL', 'Missile'), ('MOD', 'Modification'), ('SNS', 'Sensor'), ('TAC', 'Tactical Relay'), ('TLN', 'Talent'), ('TCH', 'Tech'), ('TTL', 'Title'), ('TRP', 'Torpedo'), ('TRT', 'Turret'), ('SHP', 'Ship'), ('PLT', 'Pilot'), ('THR', 'Initiative'), ('FCH', 'Force Charge'), ('CHR', 'Charge'), ('WLD', 'Wildcard')], default=None, max_length=3, null=True)),
                ('cost', models.PositiveSmallIntegerField()),
                ('charges', models.PositiveSmallIntegerField(blank=True, null=True)),
            ],
            options={
                'ordering': ['type', '-type2', 'name'],
            },
        ),
        migrations.CreateModel(
            name='TreeSlot',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('threat', models.PositiveSmallIntegerField()),
                ('cost', models.PositiveSmallIntegerField()),
                ('type', models.CharField(choices=[('AST', 'Astromech'), ('CNN', 'Cannon'), ('CNF', 'Configuration'), ('CRW', 'Crew'), ('DVC', 'Device'), ('FRC', 'Force Power'), ('GNR', 'Gunner'), ('ILC', 'Illicit'), ('MSL', 'Missile'), ('MOD', 'Modification'), ('SNS', 'Sensor'), ('TAC', 'Tactical Relay'), ('TLN', 'Talent'), ('TCH', 'Tech'), ('TTL', 'Title'), ('TRP', 'Torpedo'), ('TRT', 'Turret'), ('SHP', 'Ship'), ('PLT', 'Pilot'), ('THR', 'Initiative'), ('FCH', 'Force Charge'), ('CHR', 'Charge'), ('WLD', 'Wildcard')], max_length=3)),
                ('type2', models.CharField(blank=True, choices=[('AST', 'Astromech'), ('CNN', 'Cannon'), ('CNF', 'Configuration'), ('CRW', 'Crew'), ('DVC', 'Device'), ('FRC', 'Force Power'), ('GNR', 'Gunner'), ('ILC', 'Illicit'), ('MSL', 'Missile'), ('MOD', 'Modification'), ('SNS', 'Sensor'), ('TAC', 'Tactical Relay'), ('TLN', 'Talent'), ('TCH', 'Tech'), ('TTL', 'Title'), ('TRP', 'Torpedo'), ('TRT', 'Turret'), ('SHP', 'Ship'), ('PLT', 'Pilot'), ('THR', 'Initiative'), ('FCH', 'Force Charge'), ('CHR', 'Charge'), ('WLD', 'Wildcard')], default=None, max_length=3, null=True)),
                ('lft', models.PositiveIntegerField(editable=False)),
                ('rght', models.PositiveIntegerField(editable=False)),
                ('tree_id', models.PositiveIntegerField(db_index=True, editable=False)),
                ('level', models.PositiveIntegerField(editable=False)),
                ('parent', mptt.fields.TreeForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='xwtools.TreeSlot')),
                ('ship', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='xwtools.Ship')),
            ],
            options={
                'ordering': ['threat', 'id', 'cost'],
            },
        ),
        migrations.CreateModel(
            name='Slot',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('threat', models.PositiveSmallIntegerField()),
                ('cost', models.PositiveSmallIntegerField()),
                ('type', models.CharField(choices=[('AST', 'Astromech'), ('CNN', 'Cannon'), ('CNF', 'Configuration'), ('CRW', 'Crew'), ('DVC', 'Device'), ('FRC', 'Force Power'), ('GNR', 'Gunner'), ('ILC', 'Illicit'), ('MSL', 'Missile'), ('MOD', 'Modification'), ('SNS', 'Sensor'), ('TAC', 'Tactical Relay'), ('TLN', 'Talent'), ('TCH', 'Tech'), ('TTL', 'Title'), ('TRP', 'Torpedo'), ('TRT', 'Turret'), ('SHP', 'Ship'), ('PLT', 'Pilot'), ('THR', 'Initiative'), ('FCH', 'Force Charge'), ('CHR', 'Charge'), ('WLD', 'Wildcard')], max_length=3)),
                ('parent', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='xwtools.Slot')),
                ('ship', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='xwtools.Ship')),
            ],
        ),
        migrations.CreateModel(
            name='DialManeuver',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('speed', models.PositiveSmallIntegerField()),
                ('bearing', models.CharField(choices=[('S', 'Straight'), ('B', 'Bank'), ('T', 'Turn'), ('KT', 'K-Turn'), ('TR', 'Tallon Roll'), ('SL', 'Sloop'), ('RB', 'Reverse Bank'), ('SS', 'Stationary'), ('XX', '--')], max_length=3)),
                ('direction', models.CharField(blank=True, choices=[('L', 'Left'), ('R', 'Right')], max_length=1, null=True)),
                ('color', models.CharField(choices=[('B', 'Blue'), ('W', 'White'), ('R', 'Red')], default='W', max_length=1)),
                ('dial', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='maneuvers', to='xwtools.Dial')),
            ],
            options={
                'ordering': ['-speed', django.db.models.expressions.CombinedExpression(django.db.models.expressions.Case(django.db.models.expressions.When(bearing='S', then=django.db.models.expressions.Value(1)), django.db.models.expressions.When(bearing='XX', then=django.db.models.expressions.Value(2)), django.db.models.expressions.When(bearing='B', then=django.db.models.expressions.Value(3)), django.db.models.expressions.When(bearing='T', then=django.db.models.expressions.Value(4)), django.db.models.expressions.When(bearing='SL', then=django.db.models.expressions.Value(6)), django.db.models.expressions.When(bearing='KT', then=django.db.models.expressions.Value(8)), output_field=models.SmallIntegerField()), '*', django.db.models.expressions.Case(django.db.models.expressions.When(direction='L', then=django.db.models.expressions.Value(-1)), default=django.db.models.expressions.Value(1), output_field=models.SmallIntegerField()))],
            },
        ),
    ]
